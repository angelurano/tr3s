/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/_index'
import { Route as IndexIndexImport } from './routes/_index/index'
import { Route as SpacesSpaceIdImport } from './routes/spaces.$spaceId'
import { Route as IndexSettingsImport } from './routes/_index/settings'
import { Route as IndexFriendsImport } from './routes/_index/friends'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/_index',
  getParentRoute: () => rootRoute,
} as any)

const IndexIndexRoute = IndexIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IndexRoute,
} as any)

const SpacesSpaceIdRoute = SpacesSpaceIdImport.update({
  id: '/spaces/$spaceId',
  path: '/spaces/$spaceId',
  getParentRoute: () => rootRoute,
} as any)

const IndexSettingsRoute = IndexSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => IndexRoute,
} as any)

const IndexFriendsRoute = IndexFriendsImport.update({
  id: '/friends',
  path: '/friends',
  getParentRoute: () => IndexRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_index': {
      id: '/_index'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_index/friends': {
      id: '/_index/friends'
      path: '/friends'
      fullPath: '/friends'
      preLoaderRoute: typeof IndexFriendsImport
      parentRoute: typeof IndexImport
    }
    '/_index/settings': {
      id: '/_index/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof IndexSettingsImport
      parentRoute: typeof IndexImport
    }
    '/spaces/$spaceId': {
      id: '/spaces/$spaceId'
      path: '/spaces/$spaceId'
      fullPath: '/spaces/$spaceId'
      preLoaderRoute: typeof SpacesSpaceIdImport
      parentRoute: typeof rootRoute
    }
    '/_index/': {
      id: '/_index/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexIndexImport
      parentRoute: typeof IndexImport
    }
  }
}

// Create and export the route tree

interface IndexRouteChildren {
  IndexFriendsRoute: typeof IndexFriendsRoute
  IndexSettingsRoute: typeof IndexSettingsRoute
  IndexIndexRoute: typeof IndexIndexRoute
}

const IndexRouteChildren: IndexRouteChildren = {
  IndexFriendsRoute: IndexFriendsRoute,
  IndexSettingsRoute: IndexSettingsRoute,
  IndexIndexRoute: IndexIndexRoute,
}

const IndexRouteWithChildren = IndexRoute._addFileChildren(IndexRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof IndexRouteWithChildren
  '/friends': typeof IndexFriendsRoute
  '/settings': typeof IndexSettingsRoute
  '/spaces/$spaceId': typeof SpacesSpaceIdRoute
  '/': typeof IndexIndexRoute
}

export interface FileRoutesByTo {
  '/friends': typeof IndexFriendsRoute
  '/settings': typeof IndexSettingsRoute
  '/spaces/$spaceId': typeof SpacesSpaceIdRoute
  '/': typeof IndexIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_index': typeof IndexRouteWithChildren
  '/_index/friends': typeof IndexFriendsRoute
  '/_index/settings': typeof IndexSettingsRoute
  '/spaces/$spaceId': typeof SpacesSpaceIdRoute
  '/_index/': typeof IndexIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/friends' | '/settings' | '/spaces/$spaceId' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/friends' | '/settings' | '/spaces/$spaceId' | '/'
  id:
    | '__root__'
    | '/_index'
    | '/_index/friends'
    | '/_index/settings'
    | '/spaces/$spaceId'
    | '/_index/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRouteWithChildren
  SpacesSpaceIdRoute: typeof SpacesSpaceIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRouteWithChildren,
  SpacesSpaceIdRoute: SpacesSpaceIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_index",
        "/spaces/$spaceId"
      ]
    },
    "/_index": {
      "filePath": "_index.tsx",
      "children": [
        "/_index/friends",
        "/_index/settings",
        "/_index/"
      ]
    },
    "/_index/friends": {
      "filePath": "_index/friends.tsx",
      "parent": "/_index"
    },
    "/_index/settings": {
      "filePath": "_index/settings.tsx",
      "parent": "/_index"
    },
    "/spaces/$spaceId": {
      "filePath": "spaces.$spaceId.tsx"
    },
    "/_index/": {
      "filePath": "_index/index.tsx",
      "parent": "/_index"
    }
  }
}
ROUTE_MANIFEST_END */
